import conf from "../conf/conf";
import {Client,ID,Databases,Storage,Query} from "appwrite";

export class Service{

    client = new Client();
    databases;
    bucket;

    constructor(){
        this.client
            .setEndpoint(conf.appwriteUrl) // Your Appwrite Endpoint
            .setProject(conf.appwriteProjectId); // Your Appwrite Project ID

            this.databases = new Databases(this.client);
            this.bucket = new Storage(this.client);

    }


   // Create a new post 
    async createPost({title, slug, content, featuredImage,status, userId})
    {
        try{

            return await this.databases.createDocument(
                conf.appwriteDatabaseId,
                conf.appwriteCollectionId,
                slug, // Using slug as the document ID
                {
                    title,
                    content,
                    featuredImage,
                    status,
                    userId
                }

            )

        }
        catch(error)
        {
            throw error; // Re-throw the error for further handling
            console.error("Error creating post:", error);
        }
    }


    //update a post
    async updatePost(slug,{title, content, featuredImage,status})
    {
        try{

            return await this.databases.updateDocument(
                conf.appwriteDatabaseId,
                conf.appwriteCollectionId,
                slug, // Using slug as the document ID
                {
                    title,
                    content,
                    featuredImage,
                    status,
                }
            )

        }
        catch(error)
        {
            throw error; // Re-throw the error for further handling
            console.error("Error updating post:", error);
        }
    }

    //delete a post
    async deletePost(slug)
    {
        try{

            return await this.databases.deleteDocument(
                conf.appwriteDatabaseId,
                conf.appwriteCollectionId,
                slug // Using slug as the document ID
            )

            return true; // Return true if the post was deleted successfully

        }
        catch(error)
        {
            throw error; // Re-throw the error for further handling
            console.error("Error deleting post:", error);
            return false; // Return false if there was an error deleting the post
        }
    }

    //get single post by slug
    async getPostBySlug(slug)
    {
        try{

            return await this.databases.getDocument(
                conf.appwriteDatabaseId,
                conf.appwriteCollectionId,
                slug // Using slug as the document ID
            )
            return true; // Return true if the post was retrieved successfully

        }
        catch(error)
        {
            console.error("Error getting post by slug:", error);
            throw error; // Re-throw the error for further handling
            return false; // Return false if there was an error retrieving the post
        }

    }


    //get list documents
    async getPosts(queries = [Query.equal("status","active")])
    {
        try{
            return await this.databases.listDocuments(
                conf.appwriteDatabaseId,
                conf.appwriteCollectionId,
                queries, // Using queries to filter the posts

            )

        }
        catch(error)
        {
            console.error("Error getting posts:", error);
            throw error; // Re-throw the error for further handling
            return false; // Return false if there was an error retrieving the posts
        }
    }

    //file upload service 
    async uploadFile(file){
        try{
            return await this.bucket.createFile(
                conf.appwriteBucketId,
                ID.unique(), // Generate a unique ID for the file
                file // The file to be uploaded
            )
            return true; // Return true if the file was uploaded successfully
        }
        catch(error)
        {
            console.error("Error uploading file:", error);
            throw error; // Re-throw the error for further handling
            return false; // Return false if there was an error uploading the file
        }
    }

    //Delete a file by fileId
    async deleteFile(fileId){
        try{
                return await this.bucket.deleteFile(
                    conf.appwriteBucketId,
                    fileId // The ID of the file to be deleted
                );
                return true; // Return true if the file was deleted successfully
        }
        catch(error)
        {
            console.error("Error deleting file:", error);
            throw error; // Re-throw the error for further handling
            return false; // Return false if there was an error deleting the file
        }
    }

    getFilePreview(fileId)
    {
        return this.bucket.getFilePreview(
            conf.appwriteBucketId,
            fileId, // The ID of the file to get the preview
        );
    }
}

const service = new Service();

export default service
